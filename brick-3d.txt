-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Please see the README on GitHub at
--   <a>https://github.com/Cj-bc/brick-3D#readme</a>
@package brick-3d
@version 0.1.0.0

module Brick3D.Type
type Position = V3 Float
type Rotation = M33 Float
type Normal = V3 Float

-- | One <a>Vertex</a>
data Vertex
Vertex :: Position -> Vertex
[_v_position] :: Vertex -> Position
v_position :: Lens' Vertex Position
data Primitive
Point :: Vertex -> Primitive

-- | Line (Vector Vertex)
Triangle :: Vertex -> Vertex -> Vertex -> Primitive

-- | Calculate <a>Normal</a> of <a>Primitive</a>
calcNormal :: Primitive -> Normal

-- | Primitive that is shaded on Device Coordinate
data DCPrimitive
DCPrimitive :: Primitive -> Normal -> DCPrimitive
[_unPrimitive] :: DCPrimitive -> Primitive
[_normal] :: DCPrimitive -> Normal
unPrimitive :: Lens' DCPrimitive Primitive
normal :: Lens' DCPrimitive Normal

-- | Traversal for evry <a>Vertex</a> in each <a>Primitive</a> vertices
--   pure <tt>shouldBe</tt> pure
vertices :: Traversal' Primitive Vertex
instance GHC.Classes.Ord Brick3D.Type.Primitive
instance GHC.Classes.Eq Brick3D.Type.Primitive
instance GHC.Show.Show Brick3D.Type.Primitive
instance GHC.Classes.Ord Brick3D.Type.Vertex
instance GHC.Classes.Eq Brick3D.Type.Vertex
instance GHC.Show.Show Brick3D.Type.Vertex

module Brick3D.Camera

-- | Represents <a>Camera</a> that will be used for rendering
data Camera
Camera :: Position -> Rotation -> Float -> Float -> Float -> Camera
[_position] :: Camera -> Position
[_rotation] :: Camera -> Rotation
[_hFov] :: Camera -> Float
[_nearClip] :: Camera -> Float
[_farClip] :: Camera -> Float
rotation :: Lens' Camera Rotation
position :: Lens' Camera Position
nearClip :: Lens' Camera Float
hFov :: Lens' Camera Float
farClip :: Lens' Camera Float

-- | Move camera's transform
moveCamera :: Position -> Camera -> Camera

-- | Rotate Camera
--   
--   カメラ自身の場所で回すにはどうすれば？？
rotateCamera :: V3 Float -> Camera -> Camera
instance Data.Default.Class.Default Brick3D.Camera.Camera

module Brick3D.State

-- | Represents one 3D environment.
data ThreeDState
ThreeDState :: Camera -> Canvas -> Vector Primitive -> ThreeDState

-- | Only one camera is supported for now | Screen that will be used for
--   rendering. We will retrive Aspect ratio from this <a>Canvas</a>
[_camera] :: ThreeDState -> Camera
[_screen] :: ThreeDState -> Canvas

-- | All Primitives that is in the world.
[_prims] :: ThreeDState -> Vector Primitive
screen :: Lens' ThreeDState Canvas
prims :: Lens' ThreeDState (Vector Primitive)
camera :: Lens' ThreeDState Camera

module Brick3D.Renderer

-- | Renders <a>ThreeDState</a> to one <a>Canvas</a>, which will be shown
--   in <tt>Widget</tt>
render :: MonadIO m => ThreeDState -> m ThreeDState

-- | Do rendering process other than IO operation (which is done in
--   <a>render</a>
render' :: ThreeDState -> [((Int, Int), Char, Attr)]

-- | <a>True</a> if given <a>Primitive</a> is not clipped by far/near plane
--   
--   far/near平面によって描画されているかを確認する。 x,y方向の確認はしない
farNearClip :: Camera -> Primitive -> Bool

-- | Project one <a>Primitive</a> to device coordinate
projectPrimitive :: Float -> Primitive -> DCPrimitive

-- | Project one vertex to device coordinate
projectVertex :: Float -> Vertex -> Vertex
applyCameraTransform :: Camera -> Primitive -> Primitive

-- | Rasterize one <a>DCPrimitive</a>
rasterize :: (Int, Int) -> DCPrimitive -> [((Int, Int), Char, Attr)]

-- | <a>Vertex</a>s which constructs line begin at <tt>begin</tt> and end
--   at <tt>end</tt>
--   
--   JP: 与えられた <tt>begin</tt> と <tt>end</tt> を両端に持つ線分を構成する <a>Vertex</a>
--   を返します
rasterizeLine :: Vertex -> Vertex -> [Vertex]

module Brick.Extensions.ThreeD.Widgets

-- | Core widget that displays 3D viewport.
--   
--   You *should* call <a>render</a> function in <a>EventM</a> to render
--   image, because it requires IO action.
threeD :: ThreeDState -> Widget n
handle3DEvent :: Event -> ThreeDState -> EventM n ThreeDState
